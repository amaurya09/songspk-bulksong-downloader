"""@author : Dharmendra Kumar Verma"""from bs4 import BeautifulSoupimport urllibimport urllib2import sysimport osos.system("clear && echo WELCOME ...  ")  # Helps in clearing console and greeting the usertry:    import eyed3    """    eyeD3 is a Python tool for working with audio files, specifically mp3 files containing ID3 metadata (i.e. song info).    To Read More Please visit - http://eyed3.nicfit.net/    """except:    os.system('clear && echo PLEASE WAIT ...')    print """eyed3 in not installed, Songs title will not be renamed properly, or some songs overwrite problem may occur\n                To install you can exit the script and then type \n                \t\t 'sudo pip install eyed3'    """    user_in = raw_input("Enter 'yes' to continue or 'no' to exit\n")    if user_in.lower() != 'yes':        sys.exit(0)class URLParserHref(object):    @staticmethod    def get_movie_names(url_data):        soup = BeautifulSoup(url_data)        data = soup.findAll('ul', attrs={'class' : 'ctlg-holder'})        movie_list = []        for div in data:            links = div.findAll('a')            for a in links:                if a is not None and a is not "#":                    movie_list.append(a.get('href', None))        return movie_list    @staticmethod    def get_songs_url(song_data):        song_list = []        soup = BeautifulSoup(song_data)        data = soup.findAll('a')        for u in data:            url = u.get('href', None)            if url:                if "songid=" in url:                    song_list.append(url)        return song_listclass SongsPK():    VERSION = 1.1    #Default directory path on your Desktop    DIRPATH = os.path.expanduser('~/Desktop/songsPK_Collection')    def __init__(self):        print "Please select an option to proceed\n"        print "1 - Url based bulk song download\n"        print "2 - Movie name based bulk song download\n"        while True:            try:                option = input('Enter your option {1 or 2}\n')                os.system('clear')            except Exception as e:                    print e.message  # To display the error message in console                    continue            if option == 1:                self.urlbased()                break            elif option == 2:                self.moviehandler()                break            else:                print "Invalid option"                continue        os.system('clear && echo PLEASE WAIT ...')        """        checks the existence of default output directory , If not present it will create.        As default location is set to user Desktop, program is not checking the write permission of directory.        If directory error please check the write permission of user of ~/Desktop .        """        if not os.path.exists(self.DIRPATH):            os.system('mkdir %s' % self.DIRPATH)    def write_mp3(self, mp3):        """        Writes the downloaded file and renames the title.        """        name = (mp3.geturl()).split('/')        folder_name = os.path.expanduser(self.DIRPATH+'/'+name[-2]+'/')        song_name = name[-2]+name[-1]        if not os.path.exists(folder_name):            os.system('mkdir %s' % folder_name)  # Creates a directory on current users Desktop        #File Opening and writing        fullpath = folder_name+song_name        with open(fullpath, 'w') as output:            while True:                buf = mp3.read(65536)  # Fixed the Buffer size                if not buf:                    break                output.write(buf)        try:            audiofile = eyed3.load(fullpath)  # eyed3 module used for changing the audio file properties.            title = audiofile.tag.title            if not title.endswith('.mp3'):                title = title + ".mp3"            if audiofile.tag.title:                os.rename(fullpath, folder_name+title) # Renaming the downloaded file title        except:            print "Not able to edit title"            pass    def urlbased(self, url_datas=None):        """        Prepares the url and then download the mp3 file. To write the file in Disk it depends on write_mp3 function        """        visited_url = []        if not url_datas:            url_datas = raw_input("Enter comma separated url strings\n")            os.system('clear && echo PLEASE WAIT ...')        url_datas = url_datas.split(',')        url_count = 0        for url_data in url_datas:            if url_data.startswith('www'):                url_data = url_data.replace('www', 'http://www')            s_data = urllib2.urlopen(url_data).read()            song_urls = URLParserHref.get_songs_url(s_data)            url_count += 1            parse_url = 0            for url in song_urls:                parse_url += 1                try:                    opener = urllib2.build_opener()                    opener.addheaders = [('User-agent', 'Mozilla/5.0')]                    res = opener.open(urllib2.Request(url))  # Resolve the redirects and gets the song Object                    finalurl = res.geturl()                    # Now check the function                    if finalurl.endswith('.mp3') and finalurl not in visited_url and not finalurl.startswith('..'):                        self.write_mp3(res)  # call to write mp3 file in Disk                    visited_url.append(finalurl)                except:                    continue                print str(int(parse_url*100)/len(song_urls)) + "percent songs processed of url --->" + str(url_count)    def moviehandler(self):        """            Get Movie name list and allow user to enter multiple movie number to download songs from all the movies in one hit.            STEPS- Enter starting letter of any indian Movie                   Select your movie number from the displayed list                   Files will be downloaded on your desktop in a folder named songsPK_Collection.Movie Name            os command mainly has been used for clearing the mess        """        movie_letter = raw_input('Enter Indian Movie start letter [A-Z] to get movie name list\n')        os.system('clear && echo PLEASE WAIT ...')        try:            url_data = "http://songspk.name/%s_list.html" % movie_letter            movies = urllib2.urlopen(url_data).read()        except:            url_data = "http://songspk.name/indian_movie/%s_List.html" % movie_letter.upper()            movies = urllib2.urlopen(url_data).read()        url_dict = {}        count = 1        for url in URLParserHref.get_movie_names(movies):            if not url.startswith('..'):                url_dict[str(count)] = url                count += 1        for k, v in url_dict.iteritems():            print k + '-----' + v.rstrip('.html').split('/')[-1]        movie = raw_input('Enter comma separated movie number to download all songs of movies\n')        movie = movie.split(',')        os.system('clear && echo PLEASE WAIT ...')        movie_url = ''        for no in movie:            movie_url += "http://songspk.name/%s" % url_dict[no] + ','        movie_url = movie_url.rstrip(',')        self.urlbased(url_datas=movie_url)if __name__ == "__main__":    SongsPK()